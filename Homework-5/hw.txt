Name: Aditya Patil
UID: 406216539

1.
    a.
                                        50
                        20                              60
                10              40                              70
                    15      30                              64      80
                          28  37                                  75     
    b.
        Inorder: 10, 15, 20, 28, 30, 37, 40, 50, 60, 64, 70, 75, 80
        Preorder: 50, 20, 10, 15, 40, 30, 28, 37, 60, 70, 64, 80, 75
        Postorder: 15, 10, 28, 37, 30, 40, 20, 64, 75, 80, 70, 60, 50
    c.
                                        50
                        28                              60
                10              40                              70
                    15      37                              64      80
                                                                  75     
2.
    a. 
        struct BinaryTreeNode
        {
            int value;
            BinaryTreeNode *leftChild, *rightChild, *parent;
        };
    b. BinaryTreeNode insert(root, val);
        if the tree is empty
            create a node and set the tree to that node
        starting at the root of the tree, while we're not done...
            if val equals the current node's value, do nothing
            if val is less than the current node's value,
                if it can go left, do so
                if not, create a new node with value val
                    set the current node's left pointer to the new one
                    set the new node's parent pointer to the current node
            if val is greater than the current node's value,
                if it can go right, do so
                if not, create a new node with value val
                    set the current node's right pointer to the new one
                    set the new node's parent pointer to the current node
3. 
    a.
           7
         5   6
        2 1 3
    b. [7, 5, 6, 2, 1, 3]
    c. [6, 5, 3, 2, 1]
4. 
    a. O(C + S)
    b. O(log(C) + S)
    c. O(log(C) + log(S))
    d. O(log(S))
    e. O(1)
    f. O(log(C) + S)
    g. O(S * log(S))
    h. O(C * log(S))